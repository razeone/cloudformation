{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
      "KeyName": {
        "Description": "Name of an existing Key Pair to enable SSH Access to the instance",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "Must be the name of an existing key pair name"
      },
      "LatestAmiId": {
          "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
          "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
      },
      "InstanceType": {
        "ConstraintDescription": "Must a valid EC2 type, default t2-micro",
        "Default": "t2.micro",
        "Description": "Select an instance type",
        "Type": "String",
        "AllowedValues": [
          "t2.nano",
          "t2.micro",
          "t2.small",
          "t2.medium",
          "t2.large",
          "t2.xlarge",
          "t2.2xlarge",
          "t3.nano",
          "t3.micro",
          "t3.small",
          "t3.medium",
          "t3.large",
          "t3.xlarge",
          "t3.2xlarge",
          "t3a.nano",
          "t3a.micro",
          "t3a.small",
          "t3a.medium",
          "t3a.large",
          "t3a.xlarge",
          "t3a.2xlarge",
          "m3.medium",
          "m3.large",
          "m3.xlarge",
          "m3.2xlarge",
          "m4.large",
          "m4.xlarge",
          "m4.2xlarge",
          "m4.4xlarge",
          "m4.10xlarge",
          "m4.16xlarge",
          "r3.large",
          "r3.xlarge",
          "r3.2xlarge",
          "r3.4xlarge",
          "r3.8xlarge",
          "r4.large",
          "r4.xlarge",
          "r4.2xlarge",
          "r4.4xlarge",
          "r4.8xlarge",
          "r4.16xlarge",
          "r5.large",
          "r5.xlarge",
          "r5.2xlarge",
          "r5.4xlarge",
          "r5.8xlarge",
          "r5.12xlarge",
          "r5.16xlarge",
          "r5.24xlarge",
          "r5.metal",
          "r5a.large",
          "r5a.xlarge",
          "r5a.2xlarge",
          "r5a.4xlarge",
          "r5a.8xlarge",
          "r5a.12xlarge",
          "r5a.16xlarge",
          "r5a.24xlarge",
          "r5d.large",
          "r5d.xlarge",
          "r5d.2xlarge",
          "r5d.4xlarge",
          "r5d.8xlarge",
          "r5d.12xlarge",
          "r5d.16xlarge",
          "r5d.24xlarge",
          "r5d.metal",
          "r5ad.large",
          "r5ad.xlarge",
          "r5ad.2xlarge",
          "r5ad.4xlarge",
          "r5ad.8xlarge",
          "r5ad.12xlarge",
          "r5ad.16xlarge",
          "r5ad.24xlarge",
          "x1.16xlarge",
          "x1.32xlarge",
          "x1e.xlarge",
          "x1e.2xlarge",
          "x1e.4xlarge",
          "x1e.8xlarge",
          "x1e.16xlarge",
          "x1e.32xlarge",
          "i2.xlarge",
          "i2.2xlarge",
          "i2.4xlarge",
          "i2.8xlarge",
          "i3.large",
          "i3.xlarge",
          "i3.2xlarge",
          "i3.4xlarge",
          "i3.8xlarge",
          "i3.16xlarge",
          "i3.metal",
          "i3en.large",
          "i3en.xlarge",
          "i3en.2xlarge",
          "i3en.3xlarge",
          "i3en.6xlarge",
          "i3en.12xlarge",
          "i3en.24xlarge",
          "i3en.metal",
          "c3.large",
          "c3.xlarge",
          "c3.2xlarge",
          "c3.4xlarge",
          "c3.8xlarge",
          "c4.large",
          "c4.xlarge",
          "c4.2xlarge",
          "c4.4xlarge",
          "c4.8xlarge",
          "c5.large",
          "c5.xlarge",
          "c5.2xlarge",
          "c5.4xlarge",
          "c5.9xlarge",
          "c5.12xlarge",
          "c5.18xlarge",
          "c5.24xlarge",
          "c5.metal",
          "c5d.large",
          "c5d.xlarge",
          "c5d.2xlarge",
          "c5d.4xlarge",
          "c5d.9xlarge",
          "c5d.12xlarge",
          "c5d.18xlarge",
          "c5d.24xlarge",
          "c5d.metal",
          "c5n.large",
          "c5n.xlarge",
          "c5n.2xlarge",
          "c5n.4xlarge",
          "c5n.9xlarge",
          "c5n.18xlarge",
          "g2.2xlarge",
          "g2.8xlarge",
          "g3.4xlarge",
          "g3.8xlarge",
          "g3.16xlarge",
          "g3s.xlarge",
          "g4dn.xlarge",
          "g4dn.2xlarge",
          "g4dn.4xlarge",
          "g4dn.8xlarge",
          "g4dn.12xlarge",
          "g4dn.16xlarge",
          "p2.xlarge",
          "p2.8xlarge",
          "p2.16xlarge",
          "p3.2xlarge",
          "p3.8xlarge",
          "p3.16xlarge",
          "p3dn.24xlarge",
          "d2.xlarge",
          "d2.2xlarge",
          "d2.4xlarge",
          "d2.8xlarge",
          "f1.2xlarge",
          "f1.4xlarge",
          "f1.16xlarge",
          "m5.large",
          "m5.xlarge",
          "m5.2xlarge",
          "m5.4xlarge",
          "m5.8xlarge",
          "m5.12xlarge",
          "m5.16xlarge",
          "m5.24xlarge",
          "m5.metal",
          "m5a.large",
          "m5a.xlarge",
          "m5a.2xlarge",
          "m5a.4xlarge",
          "m5a.8xlarge",
          "m5a.12xlarge",
          "m5a.16xlarge",
          "m5a.24xlarge",
          "m5d.large",
          "m5d.xlarge",
          "m5d.2xlarge",
          "m5d.4xlarge",
          "m5d.8xlarge",
          "m5d.12xlarge",
          "m5d.16xlarge",
          "m5d.24xlarge",
          "m5d.metal",
          "m5ad.large",
          "m5ad.xlarge",
          "m5ad.2xlarge",
          "m5ad.4xlarge",
          "m5ad.8xlarge",
          "m5ad.12xlarge",
          "m5ad.16xlarge",
          "m5ad.24xlarge",
          "h1.2xlarge",
          "h1.4xlarge",
          "h1.8xlarge",
          "h1.16xlarge",
          "z1d.large",
          "z1d.xlarge",
          "z1d.2xlarge",
          "z1d.3xlarge",
          "z1d.6xlarge",
          "z1d.12xlarge",
          "z1d.metal",
          "u-6tb1.metal",
          "u-9tb1.metal",
          "u-12tb1.metal",
          "u-18tb1.metal",
          "u-24tb1.metal",
          "inf1.xlarge",
          "inf1.2xlarge",
          "inf1.6xlarge",
          "inf1.24xlarge"
        ]
      },
      "SSHLocation": {
        "Description": "The CIDR range to allow SSH traffic from",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
      },
      "InstanceName": {
        "Description": "The name of the EC2 Instance",
        "Type": "String",
        "Default": "WordpressInstance"
      },
      "DBName": {
        "Default": "MyDatabase",
        "Description" : "MySQL database name",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "64",
        "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
        "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters"
      },
      "DBUser": {
          "NoEcho": "true",
          "Description" : "Username for MySQL database access",
          "Type": "String",
          "MinLength": "1",
          "MaxLength": "16",
          "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
          "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
      },
      "DBPassword": {
        "NoEcho": "true",
        "Description" : "Password for MySQL database access",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "41",
        "AllowedPattern" : "[a-zA-Z0-9]*",
        "ConstraintDescription" : "Must contain only alphanumeric characters"
      },
  
      "DBRootPassword": {
        "NoEcho": "true",
        "Description" : "Root password for MySQL",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "41",
        "AllowedPattern" : "[a-zA-Z0-9]*",
        "ConstraintDescription" : "Must contain only alphanumeric characters"
      }
    },
    "Resources": {
      "WebServerInstance": {
        "Type": "AWS::EC2::Instance",
        "Metadata": {
            "Comment1": "Configure the bootstrap helpers to install the Apache Web Server and PHP",
            "Comment2": "Save website content to /var/www/html/index.php",

            "AWS::CloudFormation::Init": {
                "configSets": {
                    "InstallAndRun": ["Install", "Configure"]
                },
                "Install": {
                    "packages": {
                        "yum": {
                            "mysql": [],
                            "mysql-server": [],
                            "mysql-libs": [],
                            "httpd": [],
                            "php": [],
                            "php-mysql": []
                        }
                    },
                    "files": {
                        "/var/www/html/index.php": {
                          "content": { "Fn::Join": ["", [
                              "<html>\n",
                              "  <head>\n",
                              "    <title>AWS CloudFormation PHP Sample</title>\n",
                              "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                              "  </head>\n",
                              "  <body>\n",
                              "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                              "    <p/>\n",
                              "    <?php\n",
                              "      // Print out the current data and time\n",
                              "      print \"The Current Date and Time is: <br/>\";\n",
                              "      print date(\"g:i A l, F j Y.\");\n",
                              "    ?>\n",
                              "    <p/>\n",
                              "    <?php\n",
                              "      // Setup a handle for CURL\n",
                              "      $curl_handle=curl_init();\n",
                              "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                              "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                              "      // Get the hostname of the instance from the instance metadata\n",
                              "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                              "      $hostname = curl_exec($curl_handle);\n",
                              "      if (empty($hostname))\n",
                              "      {\n",
                              "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                              "      }\n",
                              "      else\n",
                              "      {\n",
                              "        print \"Server = \" . $hostname . \"<br />\";\n",
                              "      }\n",
                              "      // Get the instance-id of the instance from the instance metadata\n",
                              "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                              "      $instanceid = curl_exec($curl_handle);\n",
                              "      if (empty($instanceid))\n",
                              "      {\n",
                              "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                              "      }\n",
                              "      else\n",
                              "      {\n",
                              "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                              "      }\n",
                              "      $Database   = \"", {"Ref" : "DBName"}, "\";\n",
                              "      $DBUser     = \"", {"Ref" : "DBUser"}, "\";\n",
                              "      $DBPassword = \"", {"Ref" : "DBPassword"}, "\";\n",
                              "      print \"Database = \" . $Database . \"<br />\";\n",
                              "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                              "                      or die(\"Could not connect: \" . mysql_error());\n",
                              "      print (\"Connected to $Database successfully\");\n",
                              "      mysql_close($dbconnection);\n",
                              "    ?>\n",
                              "    <h2>PHP Information</h2>\n",
                              "    <p/>\n",
                              "    <?php\n",
                              "      phpinfo();\n",
                              "    ?>\n",
                              "  </body>\n",
                              "</html>\n"
                          ]]},
                          "mode": "000600",
                          "owner": "apache",
                          "group": "apache"
                        },
                        "/tmp/setup.mysql" : {
                          "content" : { "Fn::Join" : ["", [
                            "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
                            "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUser" }, "'@localhost IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n"
                            ]]},
                          "mode"  : "000400",
                          "owner" : "root",
                          "group" : "root"
                        },
                        "/etc/cfn/cfn-hup.conf" : {
                          "content" : { "Fn::Join" : ["", [
                            "[main]\n",
                            "stack=", { "Ref" : "AWS::StackId" }, "\n",
                            "region=", { "Ref" : "AWS::Region" }, "\n"
                          ]]},
                          "mode"    : "000400",
                          "owner"   : "root",
                          "group"   : "root"
                        },
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                          "content": { "Fn::Join" : ["", [
                            "[cfn-auto-reloader-hook]\n",
                            "triggers=post.update\n",
                            "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                            "action=/opt/aws/bin/cfn-init -v ",
                            "         --stack ", { "Ref" : "AWS::StackName" },
                            "         --resource WebServerInstance ",
                            "         --configsets InstallAndRun ",
                            "         --region ", { "Ref" : "AWS::Region" }, "\n",
                            "runas=root\n"
                          ]]},
                          "mode"    : "000400",
                          "owner"   : "root",
                          "group"   : "root"
                        }
                    },
                    "services": {
                        "sysvinit": {
                            "httpd": {"enabled": "true", "ensureRunning": "true"}
                        }
                    }
                },
                "Configure": {
                  "commands": {
                    "01_set_mysql_root_password": {
                      "command" : { "Fn::Join" : ["", ["mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'"]]},
                      "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
                    },
                    "02_create_database": {
                      "command" : { "Fn::Join" : ["", ["mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql"]]},
                      "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
                    }
                  }
                }
            }
        },
        "Properties": {
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "SecurityGroups": [
            {
              "Ref": "InstanceSecurityGroup"
            }
          ],
          "KeyName": {
            "Ref": "KeyName"
          },
          "ImageId": {
              "Ref": "LatestAmiId"
          },
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",
            "yum update -y aws-cfn-bootstrap\n",
            "# Install the files and packages from the metadata\n",
            "/opt/aws/bin/cfn-init -v ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource WebServerInstance ",
            "         --configsets InstallAndRun ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n",

            "# Signal the status from cfn-init\n",
            "/opt/aws/bin/cfn-signal -e $? ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource WebServerInstance ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n"
            ]]}},
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Ref": "InstanceName"
                }
              }
            ]
        }
      },
      "InstanceSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Enable HTTP access to everyone",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": {
                "Ref": "SSHLocation"
              }
            }
          ]
        }
      }
  }
}
